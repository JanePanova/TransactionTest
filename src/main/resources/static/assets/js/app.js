// Generated by CoffeeScript 1.9.2
(function() {
  var app;

  app = angular.module('app', ['ngAnimate', 'NavigationBar', 'ui.router', 'Requests', 'toaster']);

  app.config(function($stateProvider, $urlRouterProvider) {
    $urlRouterProvider.otherwise('/');
    return $stateProvider.state('users', {
      url: '/',
      templateUrl: 'templates/users.html',
      controller: 'UsersListController'
    }).state('transactions', {
      url: '/transactions',
      templateUrl: 'templates/transactions.html',
      controller: 'TransactionsListController'
    }).state('user', {
      url: '/user/{id:int}',
      templateUrl: 'templates/user.html',
      controller: 'UserController'
    }).state('addUser', {
      url: '/user/add',
      templateUrl: 'templates/addUser.html',
      controller: 'AddUserController'
    }).state('makeTransaction', {
      url: '/transaction',
      templateUrl: 'templates/makeTransaction.html',
      controller: 'MakeTransactionController'
    });
  });

  app.controller('UsersListController', function($scope, RequestFactory) {
    $scope.users = {};
    $scope.hasMore = true;
    $scope.minId = null;
    RequestFactory.getUsers().success(function(data) {
      var i, len, results, user;
      $scope.users = data;
      results = [];
      for (i = 0, len = data.length; i < len; i++) {
        user = data[i];
        results.push((function(user) {
          if ($scope.minId === null) {
            $scope.minId = user.id;
          }
          $scope.minId = Math.min($scope.minId, user.id);
        })(user));
      }
      return results;
    });
    return $scope.loadMore = function() {
      return RequestFactory.getUsers($scope.minId).success(function(users) {
        var fn, i, len, user;
        fn = function(user) {
          if ($scope.minId === null) {
            $scope.minId = user.id;
          }
          $scope.minId = Math.min($scope.minId, user.id);
        };
        for (i = 0, len = users.length; i < len; i++) {
          user = users[i];
          fn(user);
        }
        $scope.users = $scope.users.concat(users);
        if (users.length === 0) {
          return $scope.hasMore = false;
        }
      });
    };
  });

  app.controller('UserController', function($stateParams, $scope, RequestFactory, $state, toaster) {
    var fixMoney;
    if ($stateParams.id <= 0) {
      $state.go('users');
    }
    RequestFactory.getUser($stateParams.id).success(function(data) {
      $scope.user = data;
      if (data.blocked) {
        toaster.error('This user is blocked');
        return $state.go('users');
      }
    }).error(function(data) {
      toaster.error(data.message);
      return $state.go('users');
    });
    $scope.deleteUser = function() {
      RequestFactory.deleteUser($scope.user.id).success(function() {
        return $state.go('users', {
          reload: true
        });
      }).error(function(data) {
        return toaster.error(data.message);
      });
    };
    $scope.updateUser = function() {
      console.log($scope.user);
      RequestFactory.updateUser($scope.user).success(function() {
        return $state.go('users', {
          reload: true
        });
      }).error(function(data) {
        console.log(data);
        return toaster.error(data.message);
      });
    };
    $scope.addMoney = function() {
      var money;
      money = fixMoney($scope.moneyToAdd);
      RequestFactory.addMoney($scope.user.id, $scope.moneyToAdd).success(function() {
        $scope.user.wallet.money += money;
        return $scope.moneyToAdd = null;
      }).error(function(data) {
        return toaster.error(data.message);
      });
    };
    $scope.withdrawMoney = function() {
      var money;
      money = fixMoney($scope.moneyToWithdraw);
      RequestFactory.withdrawMoney($scope.user.id, $scope.moneyToWithdraw).success(function() {
        $scope.user.wallet.money -= money;
      }).error(function(data) {
        return toaster.error(data.message);
      });
      $scope.moneyToWithdraw = null;
    };
    fixMoney = function(money) {
      return Math.floor(money * 100) / 100;
    };
  });

  app.controller('TransactionsListController', function($scope, RequestFactory) {
    $scope.transactions = {};
    $scope.hasMore = true;
    $scope.minId = null;
    RequestFactory.getTransactions().success(function(transactions) {
      var i, len, results, transaction;
      $scope.transactions = transactions;
      results = [];
      for (i = 0, len = transactions.length; i < len; i++) {
        transaction = transactions[i];
        results.push((function(transaction) {
          if ($scope.minId === null) {
            $scope.minId = transaction.id;
          }
          $scope.minId = Math.min($scope.minId, transaction.id);
        })(transaction));
      }
      return results;
    });
    $scope.loadMore = function() {
      return RequestFactory.getTransactions($scope.minId).success(function(transactions) {
        var fn, i, len, transaction;
        fn = function(transaction) {
          if ($scope.minId === null) {
            $scope.minId = user.id;
          }
          $scope.minId = Math.min($scope.minId, transaction.id);
        };
        for (i = 0, len = transactions.length; i < len; i++) {
          transaction = transactions[i];
          fn(transaction);
        }
        $scope.transactions = $scope.transactions.concat(transactions);
        if (transactions.length === 0) {
          return $scope.hasMore = false;
        }
      });
    };
  });

  app.controller('AddUserController', function($scope, RequestFactory, $state, toaster) {
    $scope.createUser = function() {
      RequestFactory.createUser($scope.name).success(function() {
        return $state.go('users');
      }).error(function(data) {
        return toaster.error(data.message);
      });
    };
  });

  app.controller('MakeTransactionController', function($scope, RequestFactory, $state, toaster) {
    $scope.$watch('from', function() {
      if ($scope.from === void 0 || $scope.from === null || $scope.from === "") {
        $scope.userFrom = null;
      } else {
        RequestFactory.getUser($scope.from).success(function(data) {
          if (data === null) {
            $scope.userFrom = null;
          } else {
            $scope.userFrom = data;
          }
        }).error(function() {
          return $scope.userFrom = null;
        });
      }
    });
    $scope.$watch('to', function() {
      if ($scope.to === void 0 || $scope.to === null || $scope.to === "") {
        $scope.userTo = null;
      } else {
        RequestFactory.getUser($scope.to).success(function(data) {
          if (data === null) {
            $scope.userTo = null;
          } else {
            $scope.userTo = data;
          }
        }).error(function() {
          return $scope.userTo = null;
        });
      }
    });
    $scope.makeTransaction = function() {
      RequestFactory.makeTransaction($scope.from, $scope.to, $scope.money).success(function() {
        return $state.go('transactions');
      });
    };
  });

}).call(this);

//# sourceMappingURL=app.js.map
